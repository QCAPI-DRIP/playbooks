---        
  
- hosts: master
  tasks:   
  
    - name: check kubectl
      shell: kubectl get all
      register: command_result
      ignore_errors: True
      
    - name: print kubectl cluster return code
      debug:
        msg: "error message : {{ command_result.rc}}"   
      
    - name: disable swap
      become: yes
      shell: swapoff -a     
      when: command_result.rc != 0
  
    - name: kubeadm init
      shell: kubeadm init
      become: yes  
      when: command_result.rc != 0
  
    - name: Create directory .kube
      file:
        path: $HOME/.kube
        state: directory
        recurse: yes        
      when: command_result.rc != 0
        
    - name: copy admin.conf
      become: yes     
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_ssh_user }}/.kube/config"
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        remote_src: True
      when: command_result.rc != 0
       

    - name: kubectl taint nodes
      shell: kubectl taint nodes --all node-role.kubernetes.io/master-  
      when: command_result.rc != 0
      
    - name: join cmd
      shell: kubeadm token create --print-join-command
      register: k8_join_cmd  
      
    - name: Add join cmd to dummy host
      add_host:
        name:   "k8s_join_cmd_holder"
        cmd:  "{{ k8_join_cmd.stdout }}"
        
    - name:
      debug:
        msg: "Join command is {{ hostvars['k8s_join_cmd_holder']['cmd'] }}"
        
                
- hosts: worker
  tasks:
      
    - name: print join cmd
      debug:
        msg: "[Worker] K8S_TOKEN_HOLDER K8S token is {{ hostvars['k8s_join_cmd_holder']['cmd'] }}"
        
    - name: join
      shell: "{{ hostvars['k8s_join_cmd_holder']['cmd'] }}"
      become: yes
        
        
- hosts: master
  tasks: 
    - name: kubeadm set weave
      shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

    - name: get nodes
      shell: kubectl get nodes
      register: nodes_out
              
    - name: print nodes
      debug:
        var: nodes_out
        
        
    - name: get api key
      shell: kubectl describe secret $(kubectl get secrets | grep default | cut -f1 -d ' ') | grep -E '^token' | cut -f2 -d':' | tr -d '\t'
      register: api_key
              
    - name: print api_key
      debug:
        var: api_key
        
        
        
        

