---        
- hosts: localhost
  gather_facts: true

  tasks:

    - name: Add vars to dummy host
      add_host:
        name:   "k8s_deploy_vars_holder"
        docker_image:  "{{ ansible_env.DOCKER_IMAGE }}"   
        docker_service_name:  "{{ ansible_env.DOCKER_SERVICE_NAME }}"     
        container_port:  "{{ ansible_env.CONTAINER_PORT }}"    
        k8s_namespace:  "{{ ansible_env.K8s_NAMESPACE }}"    

- hosts: master
  gather_facts: true
  vars:
    k8s_state: present
    docker_image: "{{ hostvars['k8s_deploy_vars_holder']['docker_image'] }}"
    docker_service_name: "{{ hostvars['k8s_deploy_vars_holder']['docker_service_name'] }}"
    container_port: "{{ hostvars['k8s_deploy_vars_holder']['container_port'] }}"
    k8s_namespace: "{{ hostvars['k8s_deploy_vars_holder']['k8s_namespace'] }}"
  
  tasks:

    - name: Printing k8s vars
      debug:
        msg: "{{ item }}"    
      with_items:
        - "{{ docker_image }}"
        - "{{ docker_service_name }}"
        - "{{ container_port }}"
        - "{{ k8s_namespace }}"
        
       
       
    - pip:
        name:
            - openshift==0.11.0
            - kubernetes==11.0.0
            
            
    - name: Create a k8s namespace
      k8s:
        name: "{{ ansible_env.K8s_NAMESPACE }}"        
        api_version: v1
        kind: Namespace
        state: present            

    - name: Create deployment
      k8s:
        state: "{{k8s_state}}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            namespace: "{{ ansible_env.K8s_NAMESPACE }}"        
            annotations:
            labels:
              service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
            name: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
          spec:
            selector:
              matchLabels:
                service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
            replicas: 1
            template:
              metadata:
                labels:
                  service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
              spec:
                containers:
                - image: "{{ ansible_env.DOCKER_IMAGE }}"
                  name: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: "{{ ansible_env.CONTAINER_PORT }}"


    - name: Create service
      k8s:
        state: "{{k8s_state}}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            namespace: "{{ ansible_env.K8s_NAMESPACE }}"        
            labels:
              service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
            name: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
          spec:
            type: NodePort  
            ports:
            - port: "{{ ansible_env.CONTAINER_PORT }}"
              protocol: TCP
              name: http
            selector:
              service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"

