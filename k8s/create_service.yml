- hosts: master
  gather_facts: true
  vars:
    k8s_state: present
  
  tasks:
    - name: print service_name
      debug:
        var: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
        
    - name: print container_port
      debug:
        var: "{{ ansible_env.CONTAINER_PORT }}"
        
    - name: print docker_image
      debug:
        var: "{{ ansible_env.DOCKER_IMAGE }}"
        
    - name: print namespace
      debug:
        var: "{{ ansible_env.K8s_NAMESPACE }}"        
       
    - pip:
        name:
            - openshift==0.11.0
            - kubernetes==11.0.0
            
            
    - name: Create a k8s namespace
      k8s:
        name: "{{ ansible_env.K8s_NAMESPACE }}"        
        api_version: v1
        kind: Namespace
        state: present            

    - name: Create deployment
      k8s:
        state: "{{k8s_state}}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            namespace: "{{ ansible_env.K8s_NAMESPACE }}"        
            annotations:
            labels:
              service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
            name: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
          spec:
            selector:
              matchLabels:
                service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
            replicas: 1
            template:
              metadata:
                labels:
                  service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
              spec:
                containers:
                - image: "{{ ansible_env.DOCKER_IMAGE }}"
                  name: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: "{{ ansible_env.CONTAINER_PORT }}"


    - name: Create service
      k8s:
        state: "{{k8s_state}}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            namespace: "{{ ansible_env.K8s_NAMESPACE }}"        
            labels:
              service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
            name: "{{ ansible_env.DOCKER_SERVICE_NAME }}"
          spec:
            type: NodePort  
            ports:
            - port: "{{ ansible_env.CONTAINER_PORT }}"
              protocol: TCP
              name: http
            selector:
              service: "{{ ansible_env.DOCKER_SERVICE_NAME }}"

