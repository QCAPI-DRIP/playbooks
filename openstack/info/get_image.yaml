- set_fact:
    os_distro: "{{ os_distro }}"
    os_version: "{{ os_version }}"

- find:
    paths: /tmp/
    patterns: "image_info_output_{{ project_id }}.json"
    age: 10d
  register: older_files

- file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ older_files.files }}"

- stat:
    path: /tmp/image_info_output_{{ project_id }}.json
  register: stat_result

- include_vars:
    file: /tmp/image_info_output_{{ project_id }}.json
    name: image_info_output_cache
  when: stat_result.stat.exists

- os_image_info:
  register: image_info_output_2
  environment:
    OS_AUTH_URL: "{{ auth_url }}"
    OS_ACCESS_TOKEN: "{{ access_token }}"
    OS_PROJECT_ID: "{{ project_id }}"
    OS_AUTH_TYPE: "{{ token_type }}"
    OS_IDENTITY_PROVIDER: "{{ identity_provider }}"
    OS_PROTOCOL: "{{ protocol }}"
  when: not stat_result.stat.exists

- local_action: copy content={{ image_info_output_2 }} dest=/tmp/image_info_output_{{ project_id }}.json
  when: "'openstack_image' in image_info_output_2 and image_info_output_2['openstack_image'] | length > 0"

- shell: jq -r '.openstack_image[] | select(.image_type == null or .name == "{{ os_distro }}") | .id ' /tmp/image_info_output_{{ project_id }}.json
  register: image

