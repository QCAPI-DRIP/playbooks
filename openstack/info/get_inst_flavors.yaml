- hosts: localhost
  vars:
    - auth_data: {
       'auth_url': "{{ ansible_env.OS_AUTH_URL }}",
       'os_access_token': "{{ ansible_env.OS_ACCESS_TOKEN }}",
       'os_project_id': "{{ ansible_env.OS_PROJECT_ID }}",
       'os_auth_type': "{{ ansible_env.OS_AUTH_TYPE }}",
       'os_identity_provider': "{{ ansible_env.OS_IDENTITY_PROVIDER}}",
       'os_protocol': "{{ ansible_env.OS_PROTOCOL}}"
      }
      ansible_python_interpreter: /usr/bin/python3
    
  tasks:

    - local_action: copy content={{ hostvars['localhost'] }} dest=/tmp/hostvars.json

    - find:
        paths: /tmp/
        patterns: "image_info_output_{{hostvars['localhost']['auth']['project_id']}}.json"
        age: 10d
      register: older_files

    - file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ older_files.files }}"

    - stat:
        path: /tmp/flavor_info_output_{{hostvars['localhost']['auth']['project_id']}}.json
      register: stat_result

    - include_vars:
        file: /tmp/flavor_info_output_{{hostvars['localhost']['auth']['project_id']}}.json
        name: flavor_info_output_cache
      when: stat_result.stat.exists

    - os_flavor_info:
      register: flavor_info_output
      environment:
        OS_AUTH_URL: "{{ hostvars['localhost']['auth']['auth_url'] }}"
        OS_ACCESS_TOKEN: "{{ access_token }}"
        OS_PROJECT_ID: "{{ hostvars['localhost']['auth']['project_id'] }}"
        OS_AUTH_TYPE: "{{ hostvars['localhost']['auth']['token_type'] }}"
        OS_IDENTITY_PROVIDER: "{{ hostvars['localhost']['auth']['identity_provider'] }}"
        OS_PROTOCOL: "{{ hostvars['localhost']['auth']['protocol'] }}"
      when: not stat_result.stat.exists
      retries: 20
      delay: 3
      until: flavor_info_output.rc == 0

    - local_action: copy content={{ flavor_info_output }} dest=/tmp/flavor_info_output_{{hostvars['localhost']['auth']['project_id']}}.json
      when: "'openstack_flavors' in flavor_info_output and flavor_info_output['openstack_flavors'] | length > 0"

    - shell: python "{{ playbook_dir }}"/select_best_flavor.py /tmp/flavor_info_output_c1c9c25774fe418599bced1d45862c60.json /tmp/hostvars.json
      register: select_best_flavor_output

    - include_vars:
        file: "{{ select_best_flavor_output.stdout }}"
        name: selected_flavor

    - set_stats:
        data:
          flavor_id: "{{ selected_flavor.id }}"
      register: flavor_stats_output

    - debug:
        var: flavor_stats_output